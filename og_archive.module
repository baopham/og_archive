<?php
 
/**
 * @file
 * Allows archiving of groups created by the organic groups module.
 */

/**
 * Implementation of hook_perm().
 */
function og_archive_perm() {
  return array( 'administer archiving groups' );
}

/**
 * Implementation of hook_menu().
 */
function og_archive_menu() {
  $items['admin/og/archive'] = array(
    'title' => 'OG archive configuration',
    'description' => 'Configure settings for archiving of groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_archive_settings'),
    'access arguments' => array('administer archiving groups'),
    'weight' => 0,
    'file' => 'og_archive.admin.inc',
    'file path' => drupal_get_path('module', 'og_archive'),
  );
  return $items;
}

/*
 * Implementation of hook_nodeapi().
 */
function og_archive_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'view' :
      if ($node->type == 'archived' && ! $node->nid) {
        drupal_access_denied();
        exit();
      }
      break;
    case 'alter' :
      if (og_archive_isarchived( $node->nid )) {
        og_archive_node_action( $node, $node->type );
      }
      break;
  }
}

/*
 * Implements hook_menu_alter().
 */
function og_archive_menu_alter(&$items) {
  $items['node/%node/edit']['access callback'] = 'og_archive_menu_access_node_edit';
}

/*
 * Access callback to override og_menu_access_node_edit().
 */
function og_archive_menu_access_node_edit($node) {
  // OG module original access callback
  $access = og_menu_access_node_edit( $node );
  if (! $access)
    return FALSE;
    // OG check archive status.
  if (og_archive_isarchived( $node->nid )) {
    if (og_archive_unarchive_permission()) {
      drupal_set_message( "This node is archived! and you have permission to archive/unarchive it!", "error" );
      return TRUE;
    }
    $settings = og_archive_get_settings();
    if ($settings['archive_group_nodes'] == 1 && $node->type == 'group') {
      drupal_set_message( "This group is archived! You dont have permission to edit!", "error" );
      return FALSE;
    }
    if ($settings['archive_associated_nodes'] == 1 && $node->type != 'group') {
      drupal_set_message( "The group this node belongs to is archived! You dont have permission to edit it!", "error" );
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_form_alter().
 */
function og_archive_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $form['#after_build'][] = '_og_archive_after_build';
  }
}

/**
 * Custom after_build callback handler for "Create content" form
 * Remove archived groups from the OG's options field
 */
function _og_archive_after_build($form, &$form_state) {
  $settings = og_archive_get_settings();
  // Unset groups which are archived.
  if (isset($form['og_nodeapi']['visible']['og_groups']['#options'])) {
    foreach ( $form['og_nodeapi']['visible']['og_groups']['#options'] as $k => $v ) {
      if (is_numeric($k) && (! $settings['archive_associated_nodes_creation'] || og_archive_hide( $k ))) {
        if (og_archive_isarchived($k, '', FALSE)) {
          unset( $form['og_nodeapi']['visible']['og_groups']['#options'][$k] );
          if ($form['og_nodeapi']['visible']['og_groups'][$k]['#attributes']['class'] == 'og-audience')
            $form['og_nodeapi']['visible']['og_groups'][$k]['#access'] = FALSE;
        }
      } elseif (!is_numeric($k)) {
        foreach ($v as $nid => $group_name) {
          if (! $settings['archive_associated_nodes_creation'] || og_archive_hide( $nid )) {
            if (og_archive_isarchived($nid, '', FALSE))
              unset( $form['og_nodeapi']['visible']['og_groups']['#options'][$k][$nid] );
          }
        }
      }
    }
  }
  return $form;
}

/**
 * Implementation of hook_og().
 */
function og_archive_og($op, $gid, $uid, $args) {
  switch ($op) {
    case "user insert" :
      $settings = og_archive_get_settings();
      if ($settings['archive_edit_users'] == 0 && og_archive_isarchived( $gid )) {
        og_delete_subscription( $gid, $uid );
        drupal_set_message('You cannot join this group since it has been archived.', 'error');
      }
      break;
  }
}

/**
 * API function to check if a node belongs to an archived group.
 * @param $nid - node ID of the node being accessed.
 * @param $uid - the user ID for whome the node archive status is to be checked.
 * @param $check_parent - if set to TRUE will check the parent group nid for archive status.
 * @return (boolean) TRUE or FALSE.
 */
function og_archive_isarchived($nid, $uid = '', $check_parent = TRUE) {
  global $user;
  $uid = ($uid) ? $uid : $user->uid;
  // Super admin has access to all archived nodes.
  if ($uid == 1)
    return FALSE;
  $flag = flag_get_flag( "archive" );
  if (! $flag || ! $nid)
    return FALSE;
  if (! $check_parent)
    return ($flag->is_flagged( $nid )) ? TRUE : FALSE;
  $countarchived = ($flag->is_flagged( $nid )) ? 1 : 0;
  $query = db_query( "SELECT oa.group_nid FROM {og_ancestry} oa inner join {node} n on n.nid=oa.group_nid where oa.nid=%d", $nid );
  while ( $row = db_fetch_object( $query ) ) {
    if ($flag->is_flagged( $row->group_nid ))
      $countarchived ++;
  }
  return ($countarchived > 0) ? TRUE : FALSE;
}

/**
 * Function to check if the group is to be hidden from display
 * after checking settings.
 * @return boolean TRUE if group is to be hidden.
 */
function og_archive_hide($nid, $checkchildren = FALSE) {
  if (og_archive_isarchived( $nid, '', $checkchildren ) && ! og_archive_unarchive_permission())
    return TRUE;
  return FALSE;
}

/**
 * Function to check if the group is to be hidden from display 
 * and content creation is to be allowed
 * after checking settings.
 * @return boolean TRUE if group allow to create.
 */
function og_archive_create_innercontent($nid) {
  $settings = og_archive_get_settings();
  if (og_archive_isarchived( $nid, '', FALSE )){
    if(!$settings['archive_associated_nodes_creation'] || !og_archive_unarchive_permission())
      return FALSE;
  } 
  return TRUE;
}


/**
 * Function to determine if user has access to archive and unarchive.
 * returns true if has permission.
 */
function og_archive_unarchive_permission() {
  global $user;
  $settings = og_archive_get_settings();
  foreach ( $settings['roles_archive'] as $k => $v ) {
    if (array_key_exists( $v, $user->roles ) || $user->uid == 1)
      return TRUE;
  }
  return FALSE;
}
/**
 * og functions to get the serialized array of the settings of og archive.
 * @return $settings array().
 */
function og_archive_get_settings() {
  $serdata = variable_get( 'og_archive_settings', array() );
  $settings = unserialize( $serdata );
  return $settings;
}

/**
 * Predifined action for archived og groups.
 */
function og_archive_node_action(&$node, $type) {
  if (og_archive_unarchive_permission()) {
    drupal_set_message( "This node is archived! and you have permission to archive/unarchive it!", "error" );
    return TRUE;
  }
  $setting = og_archive_get_settings();
  // Clear old messages
  drupal_get_messages();
  // Deny access
  if ($setting['archive_group_nodes'] == 0 && $type == 'group') {
    drupal_set_message( "This group is archived! You dont have permission to view it!", "error" );
    $node = new stdClass( );
    $node->type = 'archived';
  }
  if ($setting['archive_associated_nodes'] == 0 && $type != 'group') {
    drupal_set_message( "The parent group of this node is archived! You dont have permission to archive/unarchive it!", "error" );
    $node = new stdClass( );
    $node->type = 'archived';
  }
  if ($setting['archive_group_nodes'] == 1 && $type == 'group') {
    drupal_set_message( "This group is archived! You have permission to view it!", "error" );
  }
  if ($setting['archive_associated_nodes'] == 1 && $type != 'group') {
    drupal_set_message( "The group this node belongs to is archived! You have permission to view it!", "error" );
  }
  return TRUE;
}

/*
 * Implementation of hook_flag().
 */
function og_archive_flag($action, $flag, $content_id, $account) {
  $setting = og_archive_get_settings();
  if ($flag->name == 'archive') {
    $archive_list = og_archive_publish_list( $content_id );
    $status = ($action == 'flag') ? 'unpublish' : 'publish';
    if ($setting['archive_group_nodes'] == 2)
      og_archive_pub_unpub( $status, $content_id );
    if ($setting['archive_associated_nodes'] == 2) {
      foreach ( $archive_list as $k => $nid ) {
        og_archive_pub_unpub( $status, $nid );
      }
    }
  }
}

/*
 * Helper function to retrive list of all nodes to be published/unpublished.
 * The list excludes nodes if all groups it belongs to is not archived.
 */
function og_archive_publish_list($gnid) {
  $nodelist = array();
  $nodetype = db_result( db_query( "SELECT type from {node} where nid=%d", $gnid ) );
  //if($nodetype == 'group') return $nodelist;
  $flag = flag_get_flag( "archive" );
  $query = db_query( "SELECT nid FROM {og_ancestry} where group_nid=%d", $gnid );
  while ( $r = db_fetch_object( $query ) ) {
    $nidfcount = 0;
    $nidacountarr = array();
    $nidq = db_query( "SELECT group_nid FROM {og_ancestry} where nid=%d", $r->nid );
    while ( $row = db_fetch_object( $nidq ) ) {
      if ($flag->is_flagged( $row->group_nid ))
        $nidfcount ++;
      $nidacountarr[] = $row->group_nid;
    }
    if ((count( $nidacountarr ) - 1) == ($nidfcount) || count( $nidacountarr ) == 1)
      $nodelist[] = $r->nid;
  }
  return $nodelist;
}

/*
 * Helper function to publish and unpublish nodes.
 * $op: publish or unpublish
 */
function og_archive_pub_unpub($op, $nid) {
  $status = ($op == 'publish') ? 1 : 0;
  db_query( "UPDATE {node} SET status = %d where nid = %d", $status, $nid );
}
